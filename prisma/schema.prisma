// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ------------------------------------------------------
// Model Definition
// ------------------------------------------------------

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String    @default("Snapline User")
  username        String    @unique @default(cuid()) 
  bio             String    @default("I am a Snapline âœŒ")
  email           String    @unique
  role            Role      @default(USER)
  emailVerified   DateTime?
  image           String    @default("https://images.unsplash.com/photo-1523251343397-9225e4cb6319?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=387&q=80")
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  likedPrompts    String[]  @db.ObjectId
  preferences     String[]
  social          String[]
  updatedAt       DateTime  @updatedAt
  lastUsernameUpdate DateTime?
  followers       String[]  @db.ObjectId
  following       String[]  @db.ObjectId
  prompts          Prompt[]
  accounts        Account[]
  trends          Trends[]
  aiServices      AIService[]

  @@unique([username, email])
  
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?


  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Prompt {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  prompt        String
  title         String
  description   String?
  service       String    @db.ObjectId
  medias        Media[]  
  likes         String[]  @db.ObjectId  
  tags          String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  status        PromptStatus @default(PUBLISHED)
  clicks        Int
  aiService     AIService @relation(fields: [service], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  

  trends        Trends?   @relation(fields: [trendsId], references: [id], onDelete: Cascade)
  trendsId      String?   @db.ObjectId
}

model Trends {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  title         String
  description   String
  image         String
  slug          String    @unique
  promptsId     String[]  @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  prompts       Prompt[]
  status        PromptStatus    @default(PUBLISHED)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}




model AIService {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String    @unique
  image         String
  website       String
  owner         String?
  price         Int?
  aiType        AIType
  status        Status
  category      String?
  description   String
  registeredBy  String    @db.ObjectId
  prompts       Prompt[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [registeredBy], references: [id], onDelete: Cascade)
}


model Media {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  secure_url  String
  promptId    String?    @db.ObjectId
  public_id   String
  format      String
  signature   String
  width       Int
  height      Int
  resource_type String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  prompt      Prompt?   @relation(fields: [promptId], references: [id], onDelete: Cascade)

}


model VerificationToken {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier  String
  token       String    @unique
  expires     DateTime

  @@unique([identifier, token])
}

enum PromptStatus {
  PUBLISHED
  DRAFT
  DELETED
  SUSPENDED
  REJECTED
  PENDING
}


enum Status {
  VERIFIED
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
  DELETED
}

enum AIType {
  IMAGE
  TEXT
  VIDEO
  AUDIO
  OTHER
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
  VERIFIED
  BANNED
  DELETED
}

